<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (1,618 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.06%)</title><rect x="10.0" y="723.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="10.0" y="707.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.06%)</title><rect x="10.0" y="691.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.06%)</title><rect x="10.0" y="675.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="10.0" y="659.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.06%)</title><rect x="10.0" y="643.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.12%)</title><rect x="10.7" y="723.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="11.5" y="707.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,614 samples, 99.75%)</title><rect x="12.2" y="723.0" width="1177.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.2" y="734.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.12%)</title><rect x="15.8" y="707.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6 samples, 0.37%)</title><rect x="17.3" y="707.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.3" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.25%)</title><rect x="21.7" y="707.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.25%)</title><rect x="21.7" y="691.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (4 samples, 0.25%)</title><rect x="21.7" y="675.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (214 samples, 13.23%)</title><rect x="24.6" y="707.0" width="156.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.6" y="718.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (204 samples, 12.61%)</title><rect x="31.9" y="691.0" width="148.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.9" y="702.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.25%)</title><rect x="37.7" y="675.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="40.7" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 0.74%)</title><rect x="40.6" y="675.0" width="8.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="43.6" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="45.7" y="659.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="48.7" y="670.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.19%)</title><rect x="47.2" y="659.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="50.2" y="670.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="47.9" y="643.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="50.9" y="654.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.12%)</title><rect x="49.4" y="675.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="52.4" y="686.0"></text>
</g>
<g>
<title>_init (3 samples, 0.19%)</title><rect x="50.8" y="675.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="53.8" y="686.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.49%)</title><rect x="53.0" y="675.0" width="5.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="56.0" y="686.0"></text>
</g>
<g>
<title>epoll_wait (167 samples, 10.32%)</title><rect x="58.9" y="675.0" width="121.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="61.9" y="686.0">epoll_wait</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.06%)</title><rect x="78.6" y="659.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="81.6" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (139 samples, 8.59%)</title><rect x="79.3" y="659.0" width="101.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="82.3" y="670.0">entry_SYSCAL..</text>
</g>
<g>
<title>do_syscall_64 (139 samples, 8.59%)</title><rect x="79.3" y="643.0" width="101.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="82.3" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (115 samples, 7.11%)</title><rect x="86.6" y="627.0" width="83.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="89.6" y="638.0">__x64_sys..</text>
</g>
<g>
<title>do_epoll_wait (114 samples, 7.05%)</title><rect x="87.3" y="611.0" width="83.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="90.3" y="622.0">do_epoll_..</text>
</g>
<g>
<title>__fget_light (4 samples, 0.25%)</title><rect x="92.4" y="595.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="95.4" y="606.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.19%)</title><rect x="93.1" y="579.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="96.1" y="590.0"></text>
</g>
<g>
<title>__rcu_read_unlock (1 samples, 0.06%)</title><rect x="94.6" y="563.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="97.6" y="574.0"></text>
</g>
<g>
<title>ep_poll (96 samples, 5.93%)</title><rect x="95.3" y="595.0" width="70.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="98.3" y="606.0">ep_poll</text>
</g>
<g>
<title>_raw_spin_lock_irq (1 samples, 0.06%)</title><rect x="98.2" y="579.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="101.2" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (11 samples, 0.68%)</title><rect x="99.0" y="579.0" width="8.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="102.0" y="590.0"></text>
</g>
<g>
<title>preempt_count_sub (2 samples, 0.12%)</title><rect x="105.5" y="563.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="108.5" y="574.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (71 samples, 4.39%)</title><rect x="107.0" y="579.0" width="51.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="110.0" y="590.0">ep_sc..</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.06%)</title><rect x="107.0" y="563.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="110.0" y="574.0"></text>
</g>
<g>
<title>_raw_write_unlock_irq (23 samples, 1.42%)</title><rect x="107.7" y="563.0" width="16.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="110.7" y="574.0"></text>
</g>
<g>
<title>ep_send_events_proc (40 samples, 2.47%)</title><rect x="124.5" y="563.0" width="29.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="127.5" y="574.0">ep..</text>
</g>
<g>
<title>ep_item_poll.isra.0 (28 samples, 1.73%)</title><rect x="133.3" y="547.0" width="20.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="136.3" y="558.0"></text>
</g>
<g>
<title>sock_poll (23 samples, 1.42%)</title><rect x="136.9" y="531.0" width="16.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="139.9" y="542.0"></text>
</g>
<g>
<title>tcp_poll (13 samples, 0.80%)</title><rect x="144.2" y="515.0" width="9.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="147.2" y="526.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (5 samples, 0.31%)</title><rect x="150.0" y="499.0" width="3.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="153.0" y="510.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.25%)</title><rect x="153.7" y="563.0" width="2.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="156.7" y="574.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.19%)</title><rect x="156.6" y="563.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="159.6" y="574.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (9 samples, 0.56%)</title><rect x="158.8" y="579.0" width="6.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="161.8" y="590.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.49%)</title><rect x="159.5" y="563.0" width="5.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="162.5" y="574.0"></text>
</g>
<g>
<title>__schedule (4 samples, 0.25%)</title><rect x="161.7" y="547.0" width="2.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="164.7" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.19%)</title><rect x="162.4" y="531.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="165.4" y="542.0"></text>
</g>
<g>
<title>__mmdrop (1 samples, 0.06%)</title><rect x="162.4" y="515.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="165.4" y="526.0"></text>
</g>
<g>
<title>__free_pages_ok (1 samples, 0.06%)</title><rect x="162.4" y="499.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="165.4" y="510.0"></text>
</g>
<g>
<title>__memcg_kmem_uncharge (1 samples, 0.06%)</title><rect x="162.4" y="483.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="165.4" y="494.0"></text>
</g>
<g>
<title>page_counter_uncharge (1 samples, 0.06%)</title><rect x="162.4" y="467.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="165.4" y="478.0"></text>
</g>
<g>
<title>page_counter_cancel (1 samples, 0.06%)</title><rect x="162.4" y="451.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="165.4" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (2 samples, 0.12%)</title><rect x="163.2" y="515.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="166.2" y="526.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.06%)</title><rect x="164.6" y="547.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="167.6" y="558.0"></text>
</g>
<g>
<title>fput_many (7 samples, 0.43%)</title><rect x="165.3" y="595.0" width="5.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="168.3" y="606.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (14 samples, 0.87%)</title><rect x="170.4" y="627.0" width="10.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="173.4" y="638.0"></text>
</g>
<g>
<title>__audit_syscall_exit (14 samples, 0.87%)</title><rect x="170.4" y="611.0" width="10.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="173.4" y="622.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.06%)</title><rect x="175.6" y="595.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="178.6" y="606.0"></text>
</g>
<g>
<title>mntput (1 samples, 0.06%)</title><rect x="176.3" y="595.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="179.3" y="606.0"></text>
</g>
<g>
<title>path_put (3 samples, 0.19%)</title><rect x="177.0" y="595.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="180.0" y="606.0"></text>
</g>
<g>
<title>dput (1 samples, 0.06%)</title><rect x="178.5" y="579.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="181.5" y="590.0"></text>
</g>
<g>
<title>unroll_tree_refs (2 samples, 0.12%)</title><rect x="179.2" y="595.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="182.2" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,383 samples, 85.48%)</title><rect x="180.7" y="707.0" width="1008.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.7" y="718.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,382 samples, 85.41%)</title><rect x="181.4" y="691.0" width="1007.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="184.4" y="702.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,153 samples, 71.26%)</title><rect x="182.1" y="675.0" width="840.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="185.1" y="686.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,084 samples, 67.00%)</title><rect x="190.9" y="659.0" width="790.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.9" y="670.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.12%)</title><rect x="190.9" y="643.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,082 samples, 66.87%)</title><rect x="192.3" y="643.0" width="789.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.3" y="654.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,053 samples, 65.08%)</title><rect x="196.7" y="627.0" width="767.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.7" y="638.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (608 samples, 37.58%)</title><rect x="196.7" y="611.0" width="443.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.7" y="622.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (603 samples, 37.27%)</title><rect x="198.9" y="595.0" width="439.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.9" y="606.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.87%)</title><rect x="198.9" y="579.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.9" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.62%)</title><rect x="201.8" y="563.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.8" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 0.56%)</title><rect x="201.8" y="547.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.8" y="558.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.06%)</title><rect x="207.6" y="531.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="210.6" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.06%)</title><rect x="208.4" y="547.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.4" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.06%)</title><rect x="208.4" y="531.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="211.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (589 samples, 36.40%)</title><rect x="209.1" y="579.0" width="429.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.1" y="590.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (589 samples, 36.40%)</title><rect x="209.1" y="563.0" width="429.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.1" y="574.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (589 samples, 36.40%)</title><rect x="209.1" y="547.0" width="429.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.1" y="558.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (589 samples, 36.40%)</title><rect x="209.1" y="531.0" width="429.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.1" y="542.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.12%)</title><rect x="212.0" y="515.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="215.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.74%)</title><rect x="213.5" y="515.0" width="8.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="216.5" y="526.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.74%)</title><rect x="213.5" y="499.0" width="8.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="216.5" y="510.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (8 samples, 0.49%)</title><rect x="213.5" y="483.0" width="5.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="216.5" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.06%)</title><rect x="215.7" y="467.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="218.7" y="478.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.12%)</title><rect x="216.4" y="467.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="219.4" y="478.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.12%)</title><rect x="217.8" y="467.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="220.8" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="217.8" y="451.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="220.8" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.06%)</title><rect x="218.6" y="451.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="221.6" y="462.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.12%)</title><rect x="219.3" y="483.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="222.3" y="494.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="220.8" y="483.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="223.8" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.06%)</title><rect x="221.5" y="483.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="224.5" y="494.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.12%)</title><rect x="222.2" y="515.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="225.2" y="526.0"></text>
</g>
<g>
<title>send (569 samples, 35.17%)</title><rect x="223.7" y="515.0" width="415.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="226.7" y="526.0">send</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.12%)</title><rect x="233.2" y="499.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="236.2" y="510.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (554 samples, 34.24%)</title><rect x="234.6" y="499.0" width="404.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="237.6" y="510.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (554 samples, 34.24%)</title><rect x="234.6" y="483.0" width="404.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="237.6" y="494.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (537 samples, 33.19%)</title><rect x="240.5" y="467.0" width="391.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="243.5" y="478.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (537 samples, 33.19%)</title><rect x="240.5" y="451.0" width="391.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="243.5" y="462.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.19%)</title><rect x="244.8" y="435.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="247.8" y="446.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.06%)</title><rect x="247.0" y="435.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="250.0" y="446.0"></text>
</g>
<g>
<title>sock_sendmsg (522 samples, 32.26%)</title><rect x="247.8" y="435.0" width="380.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="250.8" y="446.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (2 samples, 0.12%)</title><rect x="248.5" y="419.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="251.5" y="430.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.06%)</title><rect x="249.9" y="419.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="252.9" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg (518 samples, 32.01%)</title><rect x="250.7" y="419.0" width="377.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="253.7" y="430.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.19%)</title><rect x="250.7" y="403.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="253.7" y="414.0"></text>
</g>
<g>
<title>preempt_count_sub (2 samples, 0.12%)</title><rect x="251.4" y="387.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="254.4" y="398.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.06%)</title><rect x="252.9" y="403.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="255.9" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.06%)</title><rect x="252.9" y="387.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="255.9" y="398.0"></text>
</g>
<g>
<title>release_sock (11 samples, 0.68%)</title><rect x="253.6" y="403.0" width="8.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="256.6" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.31%)</title><rect x="255.0" y="387.0" width="3.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="258.0" y="398.0"></text>
</g>
<g>
<title>preempt_count_add (4 samples, 0.25%)</title><rect x="255.8" y="371.0" width="2.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="258.8" y="382.0"></text>
</g>
<g>
<title>in_lock_functions (3 samples, 0.19%)</title><rect x="256.5" y="355.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="259.5" y="366.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.25%)</title><rect x="258.7" y="387.0" width="2.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="261.7" y="398.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (503 samples, 31.09%)</title><rect x="261.6" y="403.0" width="366.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="264.6" y="414.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.19%)</title><rect x="270.4" y="387.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="273.4" y="398.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.19%)</title><rect x="270.4" y="371.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="273.4" y="382.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (430 samples, 26.58%)</title><rect x="272.5" y="387.0" width="313.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="275.5" y="398.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (428 samples, 26.45%)</title><rect x="274.0" y="371.0" width="312.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="277.0" y="382.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (392 samples, 24.23%)</title><rect x="285.7" y="355.0" width="285.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="288.7" y="366.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (363 samples, 22.44%)</title><rect x="293.7" y="339.0" width="264.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="296.7" y="350.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.06%)</title><rect x="297.3" y="323.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="300.3" y="334.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.06%)</title><rect x="298.1" y="323.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="301.1" y="334.0"></text>
</g>
<g>
<title>ip_local_out (4 samples, 0.25%)</title><rect x="298.8" y="323.0" width="2.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="301.8" y="334.0"></text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.25%)</title><rect x="298.8" y="307.0" width="2.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="301.8" y="318.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.06%)</title><rect x="301.0" y="291.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="304.0" y="302.0"></text>
</g>
<g>
<title>ip_output (352 samples, 21.76%)</title><rect x="301.7" y="323.0" width="256.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="304.7" y="334.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (4 samples, 0.25%)</title><rect x="304.6" y="307.0" width="3.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="307.6" y="318.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.12%)</title><rect x="306.1" y="291.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="309.1" y="302.0"></text>
</g>
<g>
<title>ip_finish_output2 (340 samples, 21.01%)</title><rect x="307.6" y="307.0" width="247.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="310.6" y="318.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (38 samples, 2.35%)</title><rect x="313.4" y="291.0" width="27.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="316.4" y="302.0">_..</text>
</g>
<g>
<title>dev_hard_start_xmit (15 samples, 0.93%)</title><rect x="320.7" y="275.0" width="10.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="323.7" y="286.0"></text>
</g>
<g>
<title>loopback_xmit (12 samples, 0.74%)</title><rect x="322.9" y="259.0" width="8.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="325.9" y="270.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.19%)</title><rect x="323.6" y="243.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="326.6" y="254.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.43%)</title><rect x="325.8" y="243.0" width="5.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="328.8" y="254.0"></text>
</g>
<g>
<title>netif_rx_internal (7 samples, 0.43%)</title><rect x="325.8" y="227.0" width="5.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="328.8" y="238.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.12%)</title><rect x="326.5" y="211.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="329.5" y="222.0"></text>
</g>
<g>
<title>ktime_get_with_offset (3 samples, 0.19%)</title><rect x="328.0" y="211.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="331.0" y="222.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.06%)</title><rect x="329.4" y="195.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="332.4" y="206.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.06%)</title><rect x="330.2" y="211.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="333.2" y="222.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.06%)</title><rect x="330.9" y="243.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="333.9" y="254.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (4 samples, 0.25%)</title><rect x="331.6" y="275.0" width="2.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="334.6" y="286.0"></text>
</g>
<g>
<title>validate_xmit_skb (9 samples, 0.56%)</title><rect x="334.5" y="275.0" width="6.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="337.5" y="286.0"></text>
</g>
<g>
<title>netif_skb_features (6 samples, 0.37%)</title><rect x="336.7" y="259.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="339.7" y="270.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.06%)</title><rect x="340.4" y="243.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="343.4" y="254.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (293 samples, 18.11%)</title><rect x="341.1" y="291.0" width="213.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="344.1" y="302.0">__local_bh_enable_ip</text>
</g>
<g>
<title>__this_cpu_preempt_check (1 samples, 0.06%)</title><rect x="341.1" y="275.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="344.1" y="286.0"></text>
</g>
<g>
<title>do_softirq.part.0 (291 samples, 17.99%)</title><rect x="341.8" y="275.0" width="212.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="344.8" y="286.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (285 samples, 17.61%)</title><rect x="346.2" y="259.0" width="207.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="349.2" y="270.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (285 samples, 17.61%)</title><rect x="346.2" y="243.0" width="207.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="349.2" y="254.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (274 samples, 16.93%)</title><rect x="354.2" y="227.0" width="199.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="357.2" y="238.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (4 samples, 0.25%)</title><rect x="357.9" y="211.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="360.9" y="222.0"></text>
</g>
<g>
<title>debug_smp_processor_id (1 samples, 0.06%)</title><rect x="360.8" y="211.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="363.8" y="222.0"></text>
</g>
<g>
<title>process_backlog (264 samples, 16.32%)</title><rect x="361.5" y="211.0" width="192.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="364.5" y="222.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb_one_core (261 samples, 16.13%)</title><rect x="363.7" y="195.0" width="190.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="366.7" y="206.0">__netif_receive_skb_one_c..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.37%)</title><rect x="365.9" y="179.0" width="4.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="368.9" y="190.0"></text>
</g>
<g>
<title>ip_rcv (252 samples, 15.57%)</title><rect x="370.3" y="179.0" width="183.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="373.3" y="190.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (245 samples, 15.14%)</title><rect x="373.2" y="163.0" width="178.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="376.2" y="174.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (243 samples, 15.02%)</title><rect x="374.6" y="147.0" width="177.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="377.6" y="158.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (241 samples, 14.89%)</title><rect x="376.1" y="131.0" width="175.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="379.1" y="142.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>__this_cpu_preempt_check (1 samples, 0.06%)</title><rect x="377.6" y="115.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="380.6" y="126.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.06%)</title><rect x="378.3" y="115.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="381.3" y="126.0"></text>
</g>
<g>
<title>tcp_v4_rcv (237 samples, 14.65%)</title><rect x="379.0" y="115.0" width="172.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="382.0" y="126.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (8 samples, 0.49%)</title><rect x="381.9" y="99.0" width="5.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="384.9" y="110.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.06%)</title><rect x="387.0" y="83.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="390.0" y="94.0"></text>
</g>
<g>
<title>__this_cpu_preempt_check (1 samples, 0.06%)</title><rect x="387.8" y="99.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="390.8" y="110.0"></text>
</g>
<g>
<title>_raw_spin_unlock (2 samples, 0.12%)</title><rect x="388.5" y="99.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="391.5" y="110.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (9 samples, 0.56%)</title><rect x="390.0" y="99.0" width="6.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="393.0" y="110.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.19%)</title><rect x="390.7" y="83.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="393.7" y="94.0"></text>
</g>
<g>
<title>__rcu_read_unlock (1 samples, 0.06%)</title><rect x="392.2" y="67.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="395.2" y="78.0"></text>
</g>
<g>
<title>__rcu_read_lock (1 samples, 0.06%)</title><rect x="392.9" y="83.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="395.9" y="94.0"></text>
</g>
<g>
<title>__rcu_read_unlock (1 samples, 0.06%)</title><rect x="393.6" y="83.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="396.6" y="94.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.19%)</title><rect x="394.3" y="83.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="397.3" y="94.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (213 samples, 13.16%)</title><rect x="396.5" y="99.0" width="155.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="399.5" y="110.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_rcv_established (212 samples, 13.10%)</title><rect x="397.3" y="83.0" width="154.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="400.3" y="94.0">tcp_rcv_established</text>
</g>
<g>
<title>__rcu_read_unlock (1 samples, 0.06%)</title><rect x="400.9" y="67.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="403.9" y="78.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.06%)</title><rect x="401.6" y="67.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="404.6" y="78.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.12%)</title><rect x="402.4" y="67.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="405.4" y="78.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.06%)</title><rect x="403.1" y="51.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="406.1" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.06%)</title><rect x="403.1" y="35.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="406.1" y="46.0"></text>
</g>
<g>
<title>sock_def_readable (145 samples, 8.96%)</title><rect x="403.8" y="67.0" width="105.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="406.8" y="78.0">sock_def_read..</text>
</g>
<g>
<title>__wake_up_common_lock (143 samples, 8.84%)</title><rect x="405.3" y="51.0" width="104.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="408.3" y="62.0">__wake_up_co..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (142 samples, 8.78%)</title><rect x="406.0" y="35.0" width="103.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="409.0" y="46.0">_raw_spin_un..</text>
</g>
<g>
<title>tcp_ack (48 samples, 2.97%)</title><rect x="509.6" y="67.0" width="35.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="512.6" y="78.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.49%)</title><rect x="519.8" y="51.0" width="5.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="522.8" y="62.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.12%)</title><rect x="520.5" y="35.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="523.5" y="46.0"></text>
</g>
<g>
<title>skb_release_data (5 samples, 0.31%)</title><rect x="522.0" y="35.0" width="3.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="525.0" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.25%)</title><rect x="525.6" y="51.0" width="2.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="528.6" y="62.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.06%)</title><rect x="528.5" y="51.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="531.5" y="62.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.06%)</title><rect x="529.3" y="51.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="532.3" y="62.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.19%)</title><rect x="530.0" y="51.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="533.0" y="62.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.12%)</title><rect x="530.7" y="35.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="533.7" y="46.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.06%)</title><rect x="532.2" y="51.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="535.2" y="62.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.12%)</title><rect x="532.9" y="51.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="535.9" y="62.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (3 samples, 0.19%)</title><rect x="534.4" y="51.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="537.4" y="62.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.06%)</title><rect x="535.8" y="35.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="538.8" y="46.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (3 samples, 0.19%)</title><rect x="536.6" y="51.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="539.6" y="62.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.06%)</title><rect x="538.7" y="51.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="541.7" y="62.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.06%)</title><rect x="539.5" y="51.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="542.5" y="62.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.06%)</title><rect x="540.2" y="51.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="543.2" y="62.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (5 samples, 0.31%)</title><rect x="540.9" y="51.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="543.9" y="62.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.12%)</title><rect x="544.6" y="67.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="547.6" y="78.0"></text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.19%)</title><rect x="546.0" y="67.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="549.0" y="78.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.31%)</title><rect x="548.2" y="67.0" width="3.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="551.2" y="78.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.25%)</title><rect x="548.9" y="51.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="551.9" y="62.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.19%)</title><rect x="549.7" y="35.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="552.7" y="46.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (1 samples, 0.06%)</title><rect x="551.9" y="163.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="554.9" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.12%)</title><rect x="552.6" y="163.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="555.6" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.12%)</title><rect x="552.6" y="147.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="555.6" y="158.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.06%)</title><rect x="554.1" y="275.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="557.1" y="286.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.06%)</title><rect x="554.8" y="291.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="557.8" y="302.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.25%)</title><rect x="555.5" y="307.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="558.5" y="318.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.25%)</title><rect x="555.5" y="291.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="558.5" y="302.0"></text>
</g>
<g>
<title>__rcu_read_unlock (1 samples, 0.06%)</title><rect x="557.7" y="275.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="560.7" y="286.0"></text>
</g>
<g>
<title>__skb_clone (9 samples, 0.56%)</title><rect x="558.4" y="339.0" width="6.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="561.4" y="350.0"></text>
</g>
<g>
<title>__copy_skb_header (5 samples, 0.31%)</title><rect x="561.3" y="323.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="564.3" y="334.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.06%)</title><rect x="565.0" y="339.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="568.0" y="350.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.25%)</title><rect x="565.7" y="339.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="568.7" y="350.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.06%)</title><rect x="568.6" y="339.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="571.6" y="350.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.06%)</title><rect x="569.4" y="339.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="572.4" y="350.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.06%)</title><rect x="570.1" y="339.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="573.1" y="350.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (1 samples, 0.06%)</title><rect x="570.8" y="339.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="573.8" y="350.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.12%)</title><rect x="571.6" y="355.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="574.6" y="366.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.12%)</title><rect x="571.6" y="339.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="574.6" y="350.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.06%)</title><rect x="573.0" y="355.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="576.0" y="366.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (12 samples, 0.74%)</title><rect x="573.7" y="355.0" width="8.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="576.7" y="366.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.37%)</title><rect x="573.7" y="339.0" width="4.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="576.7" y="350.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.31%)</title><rect x="574.5" y="323.0" width="3.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="577.5" y="334.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.12%)</title><rect x="576.7" y="307.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="579.7" y="318.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.06%)</title><rect x="578.1" y="339.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="581.1" y="350.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.0 (2 samples, 0.12%)</title><rect x="578.9" y="339.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="581.9" y="350.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.06%)</title><rect x="579.6" y="323.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="582.6" y="334.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.19%)</title><rect x="580.3" y="339.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="583.3" y="350.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.19%)</title><rect x="582.5" y="355.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="585.5" y="366.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.12%)</title><rect x="583.2" y="339.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="586.2" y="350.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.12%)</title><rect x="583.2" y="323.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="586.2" y="334.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (2 samples, 0.12%)</title><rect x="584.7" y="355.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="587.7" y="366.0"></text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.25%)</title><rect x="586.1" y="387.0" width="3.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="589.1" y="398.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.12%)</title><rect x="587.6" y="371.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="590.6" y="382.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.06%)</title><rect x="588.3" y="355.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="591.3" y="366.0"></text>
</g>
<g>
<title>sk_page_frag_refill (8 samples, 0.49%)</title><rect x="589.1" y="387.0" width="5.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="592.1" y="398.0"></text>
</g>
<g>
<title>skb_page_frag_refill (8 samples, 0.49%)</title><rect x="589.1" y="371.0" width="5.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="592.1" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (26 samples, 1.61%)</title><rect x="594.9" y="387.0" width="19.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="597.9" y="398.0"></text>
</g>
<g>
<title>__alloc_skb (22 samples, 1.36%)</title><rect x="597.1" y="371.0" width="16.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="600.1" y="382.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (11 samples, 0.68%)</title><rect x="600.7" y="355.0" width="8.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="603.7" y="366.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (10 samples, 0.62%)</title><rect x="601.5" y="339.0" width="7.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="604.5" y="350.0"></text>
</g>
<g>
<title>__slab_alloc.isra.0 (3 samples, 0.19%)</title><rect x="605.8" y="323.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="608.8" y="334.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.06%)</title><rect x="608.0" y="323.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="611.0" y="334.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.12%)</title><rect x="608.8" y="355.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="611.8" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.25%)</title><rect x="610.2" y="355.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="613.2" y="366.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.06%)</title><rect x="613.1" y="371.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="616.1" y="382.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.12%)</title><rect x="613.9" y="387.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="616.9" y="398.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.06%)</title><rect x="614.6" y="371.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="617.6" y="382.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.06%)</title><rect x="615.3" y="387.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="618.3" y="398.0"></text>
</g>
<g>
<title>tcp_push (4 samples, 0.25%)</title><rect x="616.0" y="387.0" width="3.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="619.0" y="398.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.12%)</title><rect x="619.0" y="387.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="622.0" y="398.0"></text>
</g>
<g>
<title>tcp_send_mss (9 samples, 0.56%)</title><rect x="620.4" y="387.0" width="6.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="623.4" y="398.0"></text>
</g>
<g>
<title>tcp_current_mss (9 samples, 0.56%)</title><rect x="620.4" y="371.0" width="6.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="623.4" y="382.0"></text>
</g>
<g>
<title>ipv4_mtu (7 samples, 0.43%)</title><rect x="621.9" y="355.0" width="5.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="624.9" y="366.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.06%)</title><rect x="627.0" y="387.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="630.0" y="398.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.06%)</title><rect x="627.7" y="387.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="630.7" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (5 samples, 0.31%)</title><rect x="628.4" y="435.0" width="3.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="631.4" y="446.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.31%)</title><rect x="628.4" y="419.0" width="3.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="631.4" y="430.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.12%)</title><rect x="630.6" y="403.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="633.6" y="414.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (6 samples, 0.37%)</title><rect x="632.1" y="467.0" width="4.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="635.1" y="478.0"></text>
</g>
<g>
<title>__audit_syscall_exit (6 samples, 0.37%)</title><rect x="632.1" y="451.0" width="4.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="635.1" y="462.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.06%)</title><rect x="633.5" y="435.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="636.5" y="446.0"></text>
</g>
<g>
<title>path_put (2 samples, 0.12%)</title><rect x="634.3" y="435.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="637.3" y="446.0"></text>
</g>
<g>
<title>dput (1 samples, 0.06%)</title><rect x="635.0" y="419.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="638.0" y="430.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.06%)</title><rect x="635.7" y="435.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="638.7" y="446.0"></text>
</g>
<g>
<title>syscall_trace_enter (3 samples, 0.19%)</title><rect x="636.5" y="467.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="639.5" y="478.0"></text>
</g>
<g>
<title>__audit_syscall_entry (2 samples, 0.12%)</title><rect x="637.2" y="451.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="640.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.12%)</title><rect x="638.7" y="595.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.06%)</title><rect x="639.4" y="579.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.06%)</title><rect x="639.4" y="563.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (11 samples, 0.68%)</title><rect x="640.1" y="611.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.31%)</title><rect x="640.1" y="595.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.06%)</title><rect x="640.8" y="579.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="643.8" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.19%)</title><rect x="641.6" y="579.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="644.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.19%)</title><rect x="643.8" y="595.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.8" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.19%)</title><rect x="643.8" y="579.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.8" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.19%)</title><rect x="643.8" y="563.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.8" y="574.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.19%)</title><rect x="645.9" y="595.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.12%)</title><rect x="646.7" y="579.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.12%)</title><rect x="646.7" y="563.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.12%)</title><rect x="646.7" y="547.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/saloed/ServiceImpl.entity (434 samples, 26.82%)</title><rect x="648.1" y="611.0" width="316.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="651.1" y="622.0">ru/mail/polis/service/saloed/ServiceImpl.en..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.12%)</title><rect x="649.6" y="595.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="652.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/saloed/ServiceImpl.getEntity (420 samples, 25.96%)</title><rect x="651.1" y="595.0" width="306.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.1" y="606.0">ru/mail/polis/service/saloed/ServiceImpl...</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.31%)</title><rect x="651.1" y="579.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (5 samples, 0.31%)</title><rect x="654.7" y="579.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.19%)</title><rect x="656.2" y="563.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="659.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (6 samples, 0.37%)</title><rect x="658.3" y="579.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.37%)</title><rect x="658.3" y="563.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="661.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.37%)</title><rect x="658.3" y="547.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.37%)</title><rect x="658.3" y="531.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="661.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.37%)</title><rect x="658.3" y="515.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.3" y="526.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.25%)</title><rect x="659.1" y="499.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.1" y="510.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (4 samples, 0.25%)</title><rect x="659.1" y="483.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="662.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="662.0" y="499.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAOImpl.get (404 samples, 24.97%)</title><rect x="662.7" y="579.0" width="294.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.7" y="590.0">ru/mail/polis/dao/RocksDAOImpl.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (394 samples, 24.35%)</title><rect x="664.2" y="563.0" width="287.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.2" y="574.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (394 samples, 24.35%)</title><rect x="664.2" y="547.0" width="287.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.2" y="558.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (362 samples, 22.37%)</title><rect x="666.4" y="531.0" width="264.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="669.4" y="542.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>/tmp/librocksdbjni8566492340554714481.so (3 samples, 0.19%)</title><rect x="671.5" y="515.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="674.5" y="526.0"></text>
</g>
<g>
<title>__GI___libc_free (3 samples, 0.19%)</title><rect x="673.7" y="515.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="676.7" y="526.0"></text>
</g>
<g>
<title>__malloc (5 samples, 0.31%)</title><rect x="675.8" y="515.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="678.8" y="526.0"></text>
</g>
<g>
<title>_init (5 samples, 0.31%)</title><rect x="679.5" y="515.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="682.5" y="526.0"></text>
</g>
<g>
<title>_int_free (2 samples, 0.12%)</title><rect x="683.1" y="515.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="686.1" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.12%)</title><rect x="684.6" y="515.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="687.6" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.06%)</title><rect x="686.1" y="515.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="689.1" y="526.0"></text>
</g>
<g>
<title>operator delete[](void*) (3 samples, 0.19%)</title><rect x="686.8" y="515.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="689.8" y="526.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (4 samples, 0.25%)</title><rect x="689.0" y="515.0" width="2.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="692.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (4 samples, 0.25%)</title><rect x="691.9" y="515.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="694.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (5 samples, 0.31%)</title><rect x="694.8" y="515.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="697.8" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (316 samples, 19.53%)</title><rect x="698.5" y="515.0" width="230.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="701.5" y="526.0">rocksdb_get_helper(JNIEnv_*, r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="699.9" y="499.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="702.9" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.06%)</title><rect x="700.6" y="499.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="703.6" y="510.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="701.4" y="499.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="704.4" y="510.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.25%)</title><rect x="702.1" y="499.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="705.1" y="510.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="702.8" y="483.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="705.8" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="703.6" y="483.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="706.6" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.06%)</title><rect x="704.3" y="483.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="707.3" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.19%)</title><rect x="705.0" y="499.0" width="2.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="708.0" y="510.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.06%)</title><rect x="705.0" y="483.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="708.0" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.12%)</title><rect x="705.7" y="483.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="708.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.06%)</title><rect x="707.2" y="499.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="710.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (264 samples, 16.32%)</title><rect x="707.9" y="499.0" width="192.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="710.9" y="510.0">rocksdb::DB::Get(rocksdb:..</text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="709.4" y="483.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="712.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.12%)</title><rect x="710.1" y="483.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="713.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.12%)</title><rect x="711.6" y="483.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="714.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (256 samples, 15.82%)</title><rect x="713.0" y="483.0" width="186.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="716.0" y="494.0">rocksdb::DB::Get(rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (252 samples, 15.57%)</title><rect x="713.8" y="467.0" width="183.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="716.8" y="478.0">rocksdb::DBImpl::Get(roc..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.25%)</title><rect x="713.8" y="451.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="716.8" y="462.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="716.7" y="451.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="719.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.06%)</title><rect x="718.1" y="451.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="721.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.12%)</title><rect x="718.9" y="451.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="721.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (2 samples, 0.12%)</title><rect x="720.3" y="451.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="723.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (231 samples, 14.28%)</title><rect x="721.8" y="451.0" width="168.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="724.8" y="462.0">rocksdb::DBImpl::GetIm..</text>
</g>
<g>
<title>/tmp/librocksdbjni8566492340554714481.so (1 samples, 0.06%)</title><rect x="730.5" y="435.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="733.5" y="446.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.19%)</title><rect x="731.3" y="435.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="734.3" y="446.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.06%)</title><rect x="733.5" y="435.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="736.5" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 0.62%)</title><rect x="734.2" y="435.0" width="7.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="737.2" y="446.0"></text>
</g>
<g>
<title>_init (3 samples, 0.19%)</title><rect x="741.5" y="435.0" width="2.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="744.5" y="446.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (5 samples, 0.31%)</title><rect x="743.7" y="435.0" width="3.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="746.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.06%)</title><rect x="747.3" y="435.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="750.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (24 samples, 1.48%)</title><rect x="748.0" y="435.0" width="17.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="751.0" y="446.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="751.7" y="419.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="754.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.19%)</title><rect x="753.2" y="419.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="756.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (6 samples, 0.37%)</title><rect x="755.3" y="419.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="758.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.31%)</title><rect x="759.7" y="419.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="762.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.06%)</title><rect x="762.6" y="403.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="765.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.19%)</title><rect x="763.4" y="419.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="766.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.12%)</title><rect x="764.1" y="403.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.12%)</title><rect x="765.6" y="435.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="768.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (9 samples, 0.56%)</title><rect x="767.0" y="435.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="770.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (5 samples, 0.31%)</title><rect x="767.7" y="419.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.06%)</title><rect x="767.7" y="403.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.06%)</title><rect x="767.7" y="387.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.06%)</title><rect x="768.5" y="403.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="771.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.12%)</title><rect x="769.2" y="403.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.06%)</title><rect x="770.7" y="403.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="773.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (3 samples, 0.19%)</title><rect x="771.4" y="419.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.06%)</title><rect x="773.6" y="435.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="776.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long) (1 samples, 0.06%)</title><rect x="774.3" y="435.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (146 samples, 9.02%)</title><rect x="775.0" y="435.0" width="106.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="778.0" y="446.0">rocksdb::MemT..</text>
</g>
<g>
<title>/tmp/librocksdbjni8566492340554714481.so (127 samples, 7.85%)</title><rect x="783.8" y="419.0" width="92.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="786.8" y="430.0">/tmp/libroc..</text>
</g>
<g>
<title>/tmp/librocksdbjni8566492340554714481.so (7 samples, 0.43%)</title><rect x="786.7" y="403.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="789.7" y="414.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (3 samples, 0.19%)</title><rect x="789.6" y="387.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="792.6" y="398.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="791.8" y="403.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="794.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (109 samples, 6.74%)</title><rect x="792.5" y="403.0" width="79.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="795.5" y="414.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni8566492340554714481.so (4 samples, 0.25%)</title><rect x="823.2" y="387.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="826.2" y="398.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.06%)</title><rect x="826.1" y="387.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.1" y="398.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.31%)</title><rect x="826.8" y="387.0" width="3.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="829.8" y="398.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="830.5" y="387.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="833.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (55 samples, 3.40%)</title><rect x="831.9" y="387.0" width="40.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="834.9" y="398.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni8566492340554714481.so (4 samples, 0.25%)</title><rect x="850.1" y="371.0" width="3.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="853.1" y="382.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.25%)</title><rect x="853.1" y="371.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="856.1" y="382.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (15 samples, 0.93%)</title><rect x="856.0" y="371.0" width="10.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="859.0" y="382.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.37%)</title><rect x="866.9" y="371.0" width="4.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="869.9" y="382.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="871.3" y="371.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="874.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.12%)</title><rect x="872.0" y="403.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="875.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long, unsigned long*, rocksdb::ValueType*) (2 samples, 0.12%)</title><rect x="873.5" y="403.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.5" y="414.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (2 samples, 0.12%)</title><rect x="874.9" y="403.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.9" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="876.4" y="419.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="879.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (4 samples, 0.25%)</title><rect x="877.1" y="419.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (2 samples, 0.12%)</title><rect x="880.0" y="419.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="883.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.06%)</title><rect x="881.5" y="435.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="884.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (3 samples, 0.19%)</title><rect x="882.2" y="435.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="885.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.12%)</title><rect x="884.4" y="435.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.12%)</title><rect x="885.9" y="435.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="888.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.25%)</title><rect x="887.3" y="435.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int) (4 samples, 0.25%)</title><rect x="887.3" y="419.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="890.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (3 samples, 0.19%)</title><rect x="888.1" y="403.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, bool, bool, bool, rocksdb::GetContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*) (1 samples, 0.06%)</title><rect x="888.1" y="387.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache(rocksdb::FilePrefetchBuffer*, rocksdb::BlockBasedTable::Rep*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::BlockBasedTable::CachableEntry&lt;rocksdb::Block&gt;*, bool, rocksdb::GetContext*) (1 samples, 0.06%)</title><rect x="888.1" y="371.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetDataBlockFromCache(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::BlockBasedTable::Rep*, rocksdb::ReadOptions const&amp;, rocksdb::BlockBasedTable::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, unsigned long, bool, rocksdb::GetContext*) (1 samples, 0.06%)</title><rect x="888.1" y="355.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.1" y="366.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni8566492340554714481.so (1 samples, 0.06%)</title><rect x="888.1" y="339.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="891.1" y="350.0"></text>
</g>
<g>
<title>MurmurHash64A(void const*, int, unsigned int) (1 samples, 0.06%)</title><rect x="888.1" y="323.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="891.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="888.8" y="387.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.8" y="398.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="888.8" y="371.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="891.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="889.5" y="387.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (1 samples, 0.06%)</title><rect x="890.3" y="451.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long) (1 samples, 0.06%)</title><rect x="891.0" y="451.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.12%)</title><rect x="891.7" y="451.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="894.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (2 samples, 0.12%)</title><rect x="893.2" y="451.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="896.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (1 samples, 0.06%)</title><rect x="894.6" y="451.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="897.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (3 samples, 0.19%)</title><rect x="895.4" y="451.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.4" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (3 samples, 0.19%)</title><rect x="897.6" y="467.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.06%)</title><rect x="899.7" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="902.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.06%)</title><rect x="900.5" y="499.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (38 samples, 2.35%)</title><rect x="901.2" y="499.0" width="27.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.2" y="510.0">r..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.06%)</title><rect x="901.2" y="483.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.2" y="494.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.12%)</title><rect x="901.9" y="483.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="904.9" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.06%)</title><rect x="903.4" y="483.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="906.4" y="494.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.25%)</title><rect x="904.1" y="483.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="907.1" y="494.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="904.8" y="467.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.8" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="905.6" y="467.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.6" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.06%)</title><rect x="906.3" y="467.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.3" y="478.0"></text>
</g>
<g>
<title>jni_NewByteArray (27 samples, 1.67%)</title><rect x="907.0" y="483.0" width="19.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="910.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.19%)</title><rect x="908.5" y="467.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.5" y="478.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.06%)</title><rect x="910.7" y="467.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="913.7" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (21 samples, 1.30%)</title><rect x="911.4" y="467.0" width="15.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 0.87%)</title><rect x="916.5" y="451.0" width="10.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="919.5" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 0.74%)</title><rect x="916.5" y="435.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.5" y="446.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (6 samples, 0.37%)</title><rect x="918.0" y="419.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.0" y="430.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (3 samples, 0.19%)</title><rect x="922.3" y="419.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="925.3" y="430.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="924.5" y="419.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="927.5" y="430.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.06%)</title><rect x="925.3" y="435.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="928.3" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="926.0" y="435.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="929.0" y="446.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.19%)</title><rect x="926.7" y="483.0" width="2.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="929.7" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.19%)</title><rect x="926.7" y="467.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="929.7" y="478.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (1 samples, 0.06%)</title><rect x="928.9" y="515.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.9" y="526.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.06%)</title><rect x="929.6" y="515.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.6" y="526.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.49%)</title><rect x="930.4" y="531.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="933.4" y="542.0"></text>
</g>
<g>
<title>_int_free (2 samples, 0.12%)</title><rect x="930.4" y="515.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="933.4" y="526.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (6 samples, 0.37%)</title><rect x="931.8" y="515.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.8" y="526.0"></text>
</g>
<g>
<title>__malloc (8 samples, 0.49%)</title><rect x="936.2" y="531.0" width="5.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="939.2" y="542.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="942.0" y="531.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="945.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (7 samples, 0.43%)</title><rect x="942.8" y="531.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="945.8" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (4 samples, 0.25%)</title><rect x="947.9" y="531.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.9" y="542.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.06%)</title><rect x="950.8" y="531.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArrayShifted (8 samples, 0.49%)</title><rect x="951.5" y="563.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.25%)</title><rect x="951.5" y="547.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.25%)</title><rect x="951.5" y="531.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="954.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.19%)</title><rect x="951.5" y="515.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="954.5" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.19%)</title><rect x="951.5" y="499.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.5" y="510.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.06%)</title><rect x="953.7" y="515.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="956.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.25%)</title><rect x="954.4" y="547.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.25%)</title><rect x="954.4" y="531.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="957.4" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.25%)</title><rect x="954.4" y="515.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="957.4" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="954.4" y="499.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.4" y="510.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (3 samples, 0.19%)</title><rect x="955.2" y="499.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="958.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/saloed/ServiceImpl.putEntity (10 samples, 0.62%)</title><rect x="957.4" y="595.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.12%)</title><rect x="957.4" y="579.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="960.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.12%)</title><rect x="957.4" y="563.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="960.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.12%)</title><rect x="957.4" y="547.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="960.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.12%)</title><rect x="957.4" y="531.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="960.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.06%)</title><rect x="958.8" y="579.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="961.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAOImpl.upsert (7 samples, 0.43%)</title><rect x="959.5" y="579.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="962.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (2 samples, 0.12%)</title><rect x="959.5" y="563.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="962.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.06%)</title><rect x="960.3" y="547.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="963.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArrayShifted (5 samples, 0.31%)</title><rect x="961.0" y="563.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="964.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (5 samples, 0.31%)</title><rect x="961.0" y="547.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="964.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.31%)</title><rect x="961.0" y="531.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="964.0" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (4 samples, 0.25%)</title><rect x="961.7" y="515.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="964.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (20 samples, 1.24%)</title><rect x="964.6" y="627.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (20 samples, 1.24%)</title><rect x="964.6" y="611.0" width="14.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="967.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (20 samples, 1.24%)</title><rect x="964.6" y="595.0" width="14.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="967.6" y="606.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="967.6" y="579.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="970.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.06%)</title><rect x="968.3" y="579.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.19%)</title><rect x="969.0" y="579.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="972.0" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="971.2" y="579.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="974.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.12%)</title><rect x="971.9" y="579.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="974.9" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.49%)</title><rect x="973.4" y="579.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.4" y="590.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="975.6" y="563.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="978.6" y="574.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.19%)</title><rect x="977.0" y="563.0" width="2.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="980.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.19%)</title><rect x="977.0" y="547.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="980.0" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.19%)</title><rect x="979.2" y="627.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="982.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.19%)</title><rect x="979.2" y="611.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="982.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.06%)</title><rect x="979.2" y="595.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="982.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.06%)</title><rect x="980.0" y="595.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="983.0" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.06%)</title><rect x="980.0" y="579.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="983.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.06%)</title><rect x="980.7" y="595.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="983.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 0.93%)</title><rect x="981.4" y="659.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="984.4" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.12%)</title><rect x="983.6" y="643.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.12%)</title><rect x="983.6" y="627.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="986.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.12%)</title><rect x="983.6" y="611.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="986.6" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.12%)</title><rect x="983.6" y="595.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="986.6" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.43%)</title><rect x="985.1" y="643.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="988.1" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.43%)</title><rect x="985.1" y="627.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="988.1" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.19%)</title><rect x="990.2" y="643.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="993.2" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (20 samples, 1.24%)</title><rect x="992.4" y="659.0" width="14.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="995.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (13 samples, 0.80%)</title><rect x="993.8" y="643.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="996.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.56%)</title><rect x="996.7" y="627.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="999.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.25%)</title><rect x="998.9" y="611.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1001.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 0.25%)</title><rect x="998.9" y="595.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1001.9" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.19%)</title><rect x="999.7" y="579.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1002.7" y="590.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.06%)</title><rect x="1001.8" y="611.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1004.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.06%)</title><rect x="1002.6" y="611.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1005.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.12%)</title><rect x="1003.3" y="643.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1006.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (3 samples, 0.19%)</title><rect x="1004.8" y="643.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1007.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.19%)</title><rect x="1006.9" y="659.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1009.9" y="670.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.12%)</title><rect x="1006.9" y="643.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1009.9" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1008.4" y="643.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1011.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.25%)</title><rect x="1009.1" y="659.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1012.1" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.93%)</title><rect x="1012.1" y="659.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1015.1" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.87%)</title><rect x="1012.8" y="643.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1015.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.68%)</title><rect x="1015.0" y="627.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1018.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.25%)</title><rect x="1017.2" y="611.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1020.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.06%)</title><rect x="1019.3" y="595.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1022.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (4 samples, 0.25%)</title><rect x="1020.1" y="611.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (2 samples, 0.12%)</title><rect x="1021.5" y="595.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1024.5" y="606.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.12%)</title><rect x="1023.0" y="675.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1026.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (226 samples, 13.97%)</title><rect x="1024.4" y="675.0" width="164.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1027.4" y="686.0">one/nio/net/Session.r..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (225 samples, 13.91%)</title><rect x="1025.2" y="659.0" width="164.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.2" y="670.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.19%)</title><rect x="1031.7" y="643.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1034.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 2.90%)</title><rect x="1033.9" y="643.0" width="34.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1036.9" y="654.0">[u..</text>
</g>
<g>
<title>[unknown] (47 samples, 2.90%)</title><rect x="1033.9" y="627.0" width="34.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1036.9" y="638.0">[u..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (38 samples, 2.35%)</title><rect x="1033.9" y="611.0" width="27.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1036.9" y="622.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.37%)</title><rect x="1034.7" y="595.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1037.7" y="606.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.19%)</title><rect x="1039.0" y="595.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.0" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="1041.2" y="595.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1044.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.12%)</title><rect x="1042.0" y="595.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.0" y="606.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (11 samples, 0.68%)</title><rect x="1043.4" y="595.0" width="8.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1046.4" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (12 samples, 0.74%)</title><rect x="1051.4" y="595.0" width="8.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1054.4" y="606.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.25%)</title><rect x="1053.6" y="579.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.6" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.12%)</title><rect x="1056.5" y="579.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.5" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.19%)</title><rect x="1058.0" y="579.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.0" y="590.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.12%)</title><rect x="1060.2" y="595.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.2" y="606.0"></text>
</g>
<g>
<title>__libc_recv (4 samples, 0.25%)</title><rect x="1061.6" y="611.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1064.6" y="622.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.12%)</title><rect x="1064.6" y="611.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1067.6" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.19%)</title><rect x="1066.0" y="611.0" width="2.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1069.0" y="622.0"></text>
</g>
<g>
<title>__libc_recv (166 samples, 10.26%)</title><rect x="1068.2" y="643.0" width="121.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1071.2" y="654.0">__libc_recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (155 samples, 9.58%)</title><rect x="1076.2" y="627.0" width="113.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1079.2" y="638.0">entry_SYSCALL_..</text>
</g>
<g>
<title>do_syscall_64 (155 samples, 9.58%)</title><rect x="1076.2" y="611.0" width="113.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1079.2" y="622.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_recvfrom (129 samples, 7.97%)</title><rect x="1094.5" y="595.0" width="94.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1097.5" y="606.0">__x64_sys_r..</text>
</g>
<g>
<title>__sys_recvfrom (128 samples, 7.91%)</title><rect x="1095.2" y="579.0" width="93.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1098.2" y="590.0">__sys_recvf..</text>
</g>
<g>
<title>fput (1 samples, 0.06%)</title><rect x="1098.1" y="563.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1101.1" y="574.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.12%)</title><rect x="1098.8" y="563.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1101.8" y="574.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.06%)</title><rect x="1100.3" y="563.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1103.3" y="574.0"></text>
</g>
<g>
<title>inet6_recvmsg (106 samples, 6.55%)</title><rect x="1101.0" y="563.0" width="77.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1104.0" y="574.0">inet6_rec..</text>
</g>
<g>
<title>tcp_recvmsg (105 samples, 6.49%)</title><rect x="1101.8" y="547.0" width="76.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1104.8" y="558.0">tcp_recv..</text>
</g>
<g>
<title>__kfree_skb (16 samples, 0.99%)</title><rect x="1117.1" y="531.0" width="11.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1120.1" y="542.0"></text>
</g>
<g>
<title>skb_release_all (12 samples, 0.74%)</title><rect x="1117.1" y="515.0" width="8.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1120.1" y="526.0"></text>
</g>
<g>
<title>skb_release_head_state (12 samples, 0.74%)</title><rect x="1117.1" y="499.0" width="8.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1120.1" y="510.0"></text>
</g>
<g>
<title>dst_release (8 samples, 0.49%)</title><rect x="1117.8" y="483.0" width="5.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1120.8" y="494.0"></text>
</g>
<g>
<title>sock_rfree (3 samples, 0.19%)</title><rect x="1123.6" y="483.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1126.6" y="494.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.25%)</title><rect x="1125.8" y="515.0" width="2.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1128.8" y="526.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.19%)</title><rect x="1128.7" y="531.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1131.7" y="542.0"></text>
</g>
<g>
<title>preempt_count_sub (2 samples, 0.12%)</title><rect x="1129.5" y="515.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1132.5" y="526.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.06%)</title><rect x="1130.9" y="531.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1133.9" y="542.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.06%)</title><rect x="1131.7" y="531.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1134.7" y="542.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.37%)</title><rect x="1132.4" y="531.0" width="4.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1135.4" y="542.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.31%)</title><rect x="1133.1" y="515.0" width="3.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1136.1" y="526.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.06%)</title><rect x="1136.0" y="499.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1139.0" y="510.0"></text>
</g>
<g>
<title>ns_to_timespec64 (1 samples, 0.06%)</title><rect x="1136.8" y="531.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1139.8" y="542.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.12%)</title><rect x="1137.5" y="531.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1140.5" y="542.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.06%)</title><rect x="1138.2" y="515.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1141.2" y="526.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (24 samples, 1.48%)</title><rect x="1138.9" y="531.0" width="17.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1141.9" y="542.0"></text>
</g>
<g>
<title>__skb_datagram_iter (23 samples, 1.42%)</title><rect x="1139.7" y="515.0" width="16.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1142.7" y="526.0"></text>
</g>
<g>
<title>_copy_to_iter (11 samples, 0.68%)</title><rect x="1141.9" y="499.0" width="8.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1144.9" y="510.0"></text>
</g>
<g>
<title>copyout (8 samples, 0.49%)</title><rect x="1144.1" y="483.0" width="5.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1147.1" y="494.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.06%)</title><rect x="1144.1" y="467.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1147.1" y="478.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (7 samples, 0.43%)</title><rect x="1144.8" y="467.0" width="5.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1147.8" y="478.0"></text>
</g>
<g>
<title>simple_copy_to_iter (9 samples, 0.56%)</title><rect x="1149.9" y="499.0" width="6.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1152.9" y="510.0"></text>
</g>
<g>
<title>__check_object_size (9 samples, 0.56%)</title><rect x="1149.9" y="483.0" width="6.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1152.9" y="494.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.43%)</title><rect x="1151.3" y="467.0" width="5.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1154.3" y="478.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (7 samples, 0.43%)</title><rect x="1156.5" y="531.0" width="5.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1159.5" y="542.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.06%)</title><rect x="1160.8" y="515.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1163.8" y="526.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (13 samples, 0.80%)</title><rect x="1161.6" y="531.0" width="9.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1164.6" y="542.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (6 samples, 0.37%)</title><rect x="1166.7" y="515.0" width="4.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1169.7" y="526.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.25%)</title><rect x="1168.1" y="499.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1171.1" y="510.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.25%)</title><rect x="1168.1" y="483.0" width="2.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1171.1" y="494.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (10 samples, 0.62%)</title><rect x="1171.0" y="531.0" width="7.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>sock_recvmsg (4 samples, 0.25%)</title><rect x="1178.3" y="563.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 0.25%)</title><rect x="1178.3" y="547.0" width="2.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.62%)</title><rect x="1181.2" y="563.0" width="7.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.62%)</title><rect x="1181.2" y="547.0" width="7.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.43%)</title><rect x="1183.4" y="531.0" width="5.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1186.4" y="542.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.06%)</title><rect x="1188.5" y="595.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1191.5" y="606.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.06%)</title><rect x="1188.5" y="579.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1191.5" y="590.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.06%)</title><rect x="1189.3" y="723.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1192.3" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="1189.3" y="707.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1192.3" y="718.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.06%)</title><rect x="1189.3" y="691.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.3" y="702.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.06%)</title><rect x="1189.3" y="675.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.3" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="1189.3" y="659.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1192.3" y="670.0"></text>
</g>
</g>
</svg>
